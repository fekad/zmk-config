#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/outputs.h>

&mmv {
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <1>;
};

&msc {
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <0>;
};


/ {
    behaviors {
        out_tog: out_tog {
            compatible = "zmk,behavior-mod-morph";
            display-name = "OUT_TOG";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&out OUT_USB>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        caps: caps {
            compatible = "zmk,behavior-mod-morph";
            display-name = "CAPS";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        to_BASE: to_BASE {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_BASE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 0>;
        };

        to_QWERTY: to_QWERTY {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_QWERTY";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 7>;
        };

        to_BUTTON: to_BUTTON {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_BUTTON";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 8>;
        };

        to_NAV: to_NAV {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_NAV";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 1>;
        };

        to_MOUSE: to_MOUSE {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_MOUSE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 2>;
        };

        to_MEDIA: to_MEDIA {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_MEDIA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 3>;
        };

        to_NUM: to_NUM {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_NUM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 4>;
        };

        to_SYM: to_SYM {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_SYM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 5>;
        };

        to_FUN: to_FUN {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_FUN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&to 6>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            display-name = "HML";
            #binding-cells = <2>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            display-name = "HMR";
            #binding-cells = <2>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        m_comma: m_comma {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_COMMA";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_dot: m_dot {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_DOT";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        to_bl: to_bl {
            compatible = "zmk,behavior-tap-dance";
            display-name = "TO_BL";
            #binding-cells = <0>;
            bindings = <&none>, <&bootloader>;

            tapping-term-ms = <200>;
        };

        m_par: m_par {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_PAR";
            bindings = <&kp LPAR>, <&kp RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_brc: m_brc {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_BRC";
            bindings = <&kp LBRC>, <&kp RBRC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_bkt: m_bkt {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_BKT";
            bindings = <&kp LBKT>, <&kp RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_lt: m_lt {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_LT";
            bindings = <&kp LT>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_astrk: m_astrk {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_ASTRK";
            bindings = <&kp ASTRK>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_and: m_and {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_AND";
            bindings = <&kp AMPERSAND>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_excl: m_excl {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_EXCL";
            bindings = <&kp EXCL>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_slash: m_slash {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_SLASH";
            bindings = <&kp KP_SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_under: m_under {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_UNDER";
            bindings = <&kp UNDER>, <&kp KP_MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_hash: m_hash {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_HASH";
            bindings = <&kp HASH>, <&kp AT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        m_percent: m_percent {
            compatible = "zmk,behavior-mod-morph";
            display-name = "M_PERCENT";
            bindings = <&kp PERCENT>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q         &kp W         &kp E        &kp R        &kp T        &kp Y        &kp U            &kp I        &kp O         &kp P
&hml LSHFT A  &hml LCTRL S  &hml LALT D  &hml LGUI F  &kp G        &kp H        &hmr LGUI J      &hmr LALT K  &hmr LCTRL L  &hmr LSHFT SQT
&kp Z         &kp X         &kp C        &kp V        &kp B        &kp N        &kp M            &m_comma     &m_dot        &m_excl
                            &lt 3 ESC    &lt 1 ENTER  &lt 2 TAB    &lt 5 SPACE  &lt 4 BACKSPACE  &lt 6 DEL
            >;
        };

        nav {
            bindings = <
&none       &none       &none     &none     &none       &kp HOME       &kp PG_UP  &kp UP     &kp PG_DN  &kp LG(RBKT)
&kp LSHFT   &kp LCTRL   &kp LALT  &kp LGUI  &none       &kp END        &kp LEFT   &kp DOWN   &kp RIGHT  &kp LG(LBKT)
&to_QWERTY  &to_BUTTON  &to_NUM   &to_NAV   &to_BASE    &kp LS(LG(Z))  &kp LG(V)  &kp LG(C)  &kp LG(X)  &kp LG(Z)
                        &none     &none     &none       &kp SPACE      &kp BSPC   &kp DEL
            >;
        };

        mouse {
            bindings = <
&none       &none       &none     &none      &none       &msc SCRL_LEFT     &msc SCRL_UP     &mmv MOVE_UP     &msc SCRL_DOWN    &none
&kp LSHFT   &kp LCTRL   &kp LALT  &kp LGUI   &none       &msc SCRL_RIGHT    &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_RIGHT   &none
&to_QWERTY  &to_BUTTON  &to_SYM   &to_MOUSE  &to_BASE    &kp LS(LG(Z))      &kp LG(V)        &kp LG(C)        &kp LG(X)         &kp LG(Z)
                        &none     &none      &none       &mkp MB2           &mkp MB1         &mkp MB3
            >;
        };

        media {
            bindings = <
&bootloader  &none       &none     &none      &bt BT_CLR    &kp C_BRI_UP      &none         &kp C_VOL_UP  &none         &none
&kp LSHFT    &kp LCTRL   &kp LALT  &kp LGUI   &none         &kp C_BRI_DN      &kp C_PREV    &kp C_VOL_DN  &kp C_NEXT    &none
&to_QWERTY   &to_BUTTON  &to_FUN   &to_MEDIA  &to_BASE      &out_tog          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
                         &none     &none      &none         &kp C_PLAY_PAUSE  &kp C_STOP    &kp C_MUTE
            >;
        };

        number {
            bindings = <
&none          &kp N7  &kp N8   &kp N9  &none              &none     &none     &none     &none       &none
&kp KP_MINUS   &kp N4  &kp N5   &kp N6  &kp KP_PLUS        &none     &kp LGUI  &kp LALT  &kp LCTRL   &kp LSHFT
&kp KP_DIVIDE  &kp N1  &kp N2   &kp N3  &kp KP_ASTERISK    &to_BASE  &to_NUM   &to_NAV   &to_BUTTON  &to_QWERTY
                       &kp DOT  &kp N0  &kp KP_EQUAL       &none     &none     &none
            >;
        };

        symbol {
            bindings = <
&kp GRAVE  &m_lt       &m_hash   &m_and    &m_excl      &none     &none     &none      &none       &none
&m_brc     &m_bkt      &m_par    &m_dot    &m_comma     &none     &kp LGUI  &kp LALT   &kp LCTRL   &kp LSHFT
&none      &m_percent  &m_slash  &m_astrk  &none        &to_BASE  &to_SYM   &to_MOUSE  &to_BUTTON  &to_QWERTY
                       &kp APOS  &m_under  &kp EQUAL    &none     &none     &none
            >;
        };

        fun {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9   &kp PSCRN          &none     &none     &none      &none       &bootloader
&kp F11  &kp F4  &kp F5  &kp F6   &kp SLCK           &none     &kp LGUI  &kp LALT   &kp LCTRL   &kp LSHFT
&kp F10  &kp F1  &kp F2  &kp F3   &kp PAUSE_BREAK    &to_BASE  &to_FUN   &to_MEDIA  &to_BUTTON  &to_QWERTY
                 &caps   &kp RET  &kp TAB            &none     &none     &none
            >;
        };

        qwerty {
            bindings = <
&kp Q          &kp W         &kp F        &kp P        &kp B        &kp J        &kp L            &kp U        &kp Y         &kp SQT
&hml LSHIFT A  &hml LCTRL R  &hml LALT S  &hml LGUI T  &kp G        &kp M        &hmr LGUI N      &hmr LALT E  &hmr LCTRL I  &hmr LSHFT O
&kp Z          &kp X         &kp C        &kp D        &kp V        &kp K        &kp H            &m_comma     &m_dot        &m_excl
                             &lt 3 ESC    &lt 1 ENTER  &lt 2 TAB    &lt 5 SPACE  &lt 4 BACKSPACE  &lt 6 DEL
            >;
        };

        button {
            bindings = <
&to_BASE   &none      &none      &none      &none            &none     &none  &none  &none  &none
&kp LSHFT  &kp LCTRL  &kp LALT   &kp LGUI   &none            &none     &none  &none  &none  &none
&kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LS(LG(Z))    &to_BASE  &none  &none  &none  &none
                      &mkp MB3   &mkp MB1   &mkp MB2         &none     &none  &none
            >;
        };
    };
};

/*
        // -------------------------------------------------------------------------------------
        // |   Q   |   W   |   F   |   P   |   B   |   |   J   |   L   |   U   |   Y   |   ;:  |
        // |   A   |   R   |   S   |   T   |   G   |   |   M   |   N   |   E   |   I   |   O   |
        // |   Z   |   X   |   C   |   D   |   V   |   |   K   |   H   |   ,<  |   .>  |   /?  |
        //                 |       |  TAB  |  SPC  |   |  BSPC |  ENT  |  SYM  |

        // -------------------------------------------------------------------------------------
        // |   Q   |   W   |   E   |   R   |   T   |   |   Y   |   U   |   I   |   O   |   P   |
        // |   A   |   S   |   D   |   F   |   G   |   |   H   |   J   |   K   |   L   |   ;:  |
        // |   Z   |   X   |   C   |   V   |   B   |   |   N   |   M   |   ,<  |   . > |   /?  |
        //                 | CTRL  | (NAV) | SHIFT |   | SPACE |  SYM  |  ALT  |

        // -------------------------------------------------------------------------------------
        // |  ESC  |   @   |   #   |   $   |   %   |   |   ^   |   &   |   *   |   !   | BSPC  |
        // |  TAB  |   =   |   _   |   '   |   :   |   |   \   |   (   |   )   |   |   | ENTER |
        // |   `   |   +   |   -   |   "   |   ~   |   |   {   |   [   |   ]   |   }   |       |
        //                 | CTRL  | BASE  |  CMD  |   | SPACE |  NUM  |  ALT  |

        // -------------------------------------------------------------------------------------
        // |  ESC  |       | BR-   |  BR+  |   _   |   |   -   |   7   |   8   |   9   |   /   |
        // |  TAB  |       | VOL-  | VOL+  |   +   |   |   =   |   4   |   5   |   6   |   *   |
        // |   `   | PREV  | PLAY  | NEXT  |   .   |   |   0   |   1   |   2   |   3   |       |
        //                 | CTRL  | BASE  | SHIFT |   | SPACE |       |  ALT  |

*/
